(function () {
'use strict';

angular.module('llc.archives', [
  'ionic',
  'llc.archives.congregation',
  'llc.archives.sermon',
  'llc.archives.settings',
  'llc.archives.common',
  'ngResource'
])

.config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {

  $stateProvider
    .state('tab', {
      url: '/tab',
      abstract: true,
      templateUrl: 'templates/tabs.html'
    });

  // if no state is matched, use this as the fallback
  $urlRouterProvider.otherwise('/tab/congregations');

}])

.run(['$rootScope', '$ionicLoading', '$ionicPlatform', function ($rootScope, $ionicLoading, $ionicPlatform) {

  $rootScope.$on('$stateChangeStart', function () {
    $ionicLoading.show({template: 'Loading...'});
  });

  $rootScope.$on('$stateChangeSuccess', function () {
    $ionicLoading.hide();
  })

  $ionicPlatform.ready(function() {
    if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
      cordova.plugins.Keyboard.disableScroll(true);
    }
    if (window.StatusBar) {
      StatusBar.styleLightContent();
    }
  });

}])

.constant('api', {
  llcArchives: 'https://llc-archives.herokuapp.com/api'
})

})();

(function () {
'use strict';

angular.module('llc.archives.common', []);

})();

(function () {
'use strict';

angular.module('llc.archives.congregation', [])
.config(['$stateProvider', function($stateProvider) {

  $stateProvider
    .state('tab.congregations', {
      url: '/congregations',
      views: {
        'congregations': {
          templateUrl: 'modules/congregation/congregationList.html',
          controller: 'CongregationListCtrl as congregationListCtrl',
          resolve: {
            congregations: ['Congregation', function (Congregation) {
              return Congregation.query().$promise;
            }]
          }
        }
      }
    })
    .state('tab.congregation', {
      url: '/congregations/:id',
      views: {
        'congregations': {
          templateUrl: 'modules/congregation/congregation.html',
          controller: 'CongregationCtrl as congregationCtrl',
          resolve: {
            congregation: ['Congregation', '$stateParams', function (Congregation, $stateParams) {
              return  Congregation.get({ id: $stateParams.id }).$promise;
            }],
            sermons: ['Sermon', '$stateParams', function (Sermon, $stateParams) {
              return Sermon.findAllByCongregation({ congregationId: $stateParams.id }).$promise;
            }]
          }
        }
      }
    })

}]);
})();

(function () {
'use strict';

function CongregationCtrl (congregation, sermons) {
  this.congregation = congregation;
  this.sermons = sermons;
}

angular.module('llc.archives.congregation')
  .controller('CongregationCtrl', ['congregation', 'sermons', CongregationCtrl])

})();

(function () {
'use strict';

function CongregationListCtrl (congregations){
  this.congregations = congregations;
}

angular.module('llc.archives.congregation')
  .controller('CongregationListCtrl', ['congregations', CongregationListCtrl])

})();

(function () {
'use strict';

function CongregationService ($resource, api) {

  var restApiUrl = api.llcArchives;

  return $resource(restApiUrl + '/congregations/:id', {
    id: '@id'
  }, {
    query: {
      method: 'GET',
      url: restApiUrl + '/congregations',
      cache: true,
      isArray: true,
      transformResponse: function (data) {
        var dataAsJson = angular.fromJson(data);
        return dataAsJson._embedded.congregations;
      }
    }
  });

}

angular.module('llc.archives.congregation')
  .factory('Congregation', ['$resource', 'api', CongregationService]);

})();

(function () {
'use strict';

angular.module('llc.archives.sermon', [])
.config(['$stateProvider', function ($stateProvider) {

  $stateProvider
    .state('tab.sermon', {
      url: '/congregations/:name/sermons/:id',
      views: {
        'congregations': {
          templateUrl: 'modules/sermon/sermon.html',
          controller: 'SermonCtrl as sermonCtrl',
          resolve: {
            sermon: ['Sermon', '$stateParams', function (Sermon, $stateParams) {
              return Sermon.get({ id: $stateParams.id }).$promise;
            }]
          }
        }
      }
    })

}])

})();

(function () {
'use strict';

function SermonCtrl (sermon){
  this.sermon = sermon;
}

angular.module('llc.archives.sermon')
  .controller('SermonCtrl', ['sermon', SermonCtrl])

})();

(function () {
'use strict';

function Sermon ($resource, api) {
    var restApiUrl = api.llcArchives;

    return $resource(restApiUrl + '/sermons/:id', {
      id: '@id'
    }, {
      findAllByCongregation: {
        method: 'GET',
        url: restApiUrl + '/congregations/:congregationId/sermons',
        transformResponse: function (data) {
          var dataAsJson = angular.fromJson(data);
          return dataAsJson._embedded ? dataAsJson._embedded.sermons : [];
        },
        cache: true,
        isArray: true
      }
    });
}

angular.module('llc.archives.sermon')
  .factory('Sermon', ['$resource', 'api', Sermon]);

})();

(function  () {
'use strict';

angular.module('llc.archives.settings', [])
.config(['$stateProvider', function ($stateProvider) {

  $stateProvider
    .state('tab.settings', {
      url: '/settings',
      views: {
        'settings': {
          templateUrl: 'modules/settings/settings.html',
          controller: 'SettingsCtrl as settingsCtrl',
          resolve: {
            settings: ['Settings', function (Settings) {
              return Settings.get();
            }],
            congregations: ['Congregation', function (Congregation) {
                return Congregation.query().$promise;
            }]
          }
        }
      }
    });

}])

})();

(function () {
'use strict';

function SettingsCtrl ($scope, $localstorage, Settings, settings, congregations) {

  this.settings = settings;
  this.congregations = congregations;

  this.save = function() {
    Settings.save(this.settings);
  }

};

angular.module('llc.archives.settings')
  .controller('SettingsCtrl', ['$scope', '$localstorage', 'Settings', 'settings', 'congregations', SettingsCtrl]);


})();

(function () {
'use strict';

function Settings ($localstorage) {

  var defaultSettings = { defaultCongregation: '' };

  function hasSavedSettings () {
    var settings = $localstorage.get('settings');
    return angular.isDefined(settings) && settings != 'undefined';
  }

  function getSavedSettings () {
    return $localstorage.getObject('settings');
  }

  return {
    get: function () {
      return hasSavedSettings() ? getSavedSettings() : defaultSettings;
    },
    save: function (settings) {
      $localstorage.setObject('settings', settings);
    }
  }
}

angular.module('llc.archives.settings')
  .factory('Settings', ['$localstorage', Settings]);

})();

(function () {
'use strict';

angular.module('llc.archives.common')
.factory('$localstorage', ['$window', function($window) {
  return {
    set: function(key, value) {
      $window.localStorage[key] = value;
    },
    get: function(key, defaultValue) {
      return $window.localStorage[key] || defaultValue;
    },
    setObject: function(key, value) {
      $window.localStorage[key] = JSON.stringify(value);
    },
    getObject: function(key) {
      return JSON.parse($window.localStorage[key] || '{}');
    }
  }
}]);

})();
